AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FMLaaS Core

Parameters:
  Stage:
    Type: String

Globals:
  Function:
    Runtime: python3.7
    Environment:
      Variables:
        MODELS_BUCKET: !Join ["", [!Ref Stage, "-fedlearn-models"]]
        GROUPS_TABLE_NAME: !Join ["", [!Ref Stage, "-fl-groups"]]
        ROUNDS_TABLE_NAME: !Join ["", [!Ref Stage, "-fl-rounds"]]
        AUTH_KEY_TABLE_NAME: !Join ["", [!Ref Stage, "-fl-auth-key"]]
        AGGREGATION_LAMBDA_FUNCTION_NAME: !Join ["", [!Ref Stage, "-AggregateModels"]]
        COGNITO_USER_POOL_CLIENT_ID: !Ref FedLearnCognitoUserPoolClient
        COGNITO_USER_POOL_ID: !Ref FedLearnCognitoUserPool

Resources:
  # ------------ Api ------------
  FmlaasProdApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Auth:
        DefaultAuthorizer: LambdaRequestAuthorizer
        Authorizers:
          LambdaRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt LambdaAuthFunction.Arn
            Identity:
              Headers:
                - Authorization


  # ------------ DynamoDB ------------
  GroupsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "ID"
          KeyType: "HASH"
      TableName: !Join ["", [!Ref Stage, "-fl-groups"]]

  RoundsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "ID"
          KeyType: "HASH"
      TableName: !Join ["", [!Ref Stage, "-fl-rounds"]]

  AuthKeyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "ID"
          KeyType: "HASH"
      TableName: !Join ["", [!Ref Stage, "-fl-auth-key"]]


  # ------------ Cognito ------------
  FedLearnCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join ["", [!Ref Stage, "-fl-user-pool"]]
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 30
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  FedLearnCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref FedLearnCognitoUserPool
      ClientName: !Join ["", [!Ref Stage, "-fl-user-pool-client"]]
      GenerateSecret: false


  # ------------ S3 ------------
  ModelBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["", [!Ref Stage, "-fedlearn-models"]]


  # ------------ IAM ------------
  S3PutObjectPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["", [!Ref Stage, "-S3PutObjectPolicy"]]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub "${ModelBucket.Arn}/*"

  S3GetObjectPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["", [!Ref Stage, "-S3GetObjectPolicy"]]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub "${ModelBucket.Arn}/*"


  # ------------ Layers ------------
  FMLaaSCoreDependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: core-sam-dependencies
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.7
      RetentionPolicy: Delete


  # ------------ Lambda ------------
  LambdaAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      MemorySize: 1536
      CodeUri: api/lambda_authorizer/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-LambdaAuthorizer"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthKeyTable

  CreateApiKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      MemorySize: 1536
      CodeUri: api/api_key/post/create/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-CreateApiKey"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthKeyTable
      Events:
        CreateApiKeyEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/auth/create_key
            Method: post

  RegisterDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      MemorySize: 1536
      CodeUri: api/group/post/register_device/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-RegisterDevice"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthKeyTable
      Events:
        RegisterDeviceApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/device/create
            Method: post

  CancelRoundFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/round/post/cancel/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-CancelRound"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RoundsTable
      Events:
        CancelRoundApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/round/cancel
            Method: post

  SubmitRoundStartModelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/round/post/submit_start_model/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-SubmitRoundStartModel"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RoundsTable
        - !Ref S3PutObjectPolicy
      Events:
        SubmitRoundStartModelApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/round/submit_start_model
            Method: post

  CreateRoundFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/round/post/create/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-CreateRound"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RoundsTable
      Events:
        CreateRoundApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/round/create
            Method: post

  GetRoundFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/round/get/round/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-GetRound"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref RoundsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
      Events:
        GetRoundApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/round/get/{group_id}/{round_id}
            Method: get

  GetGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/group/get/group/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-GetGroup"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
      Events:
        GetGroupApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/group/get/{group_id}
            Method: get

  ModelUploadedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/model_uploaded/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-ModelUploaded"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RoundsTable
      Events:
        ModelUploadedEvent:
          Type: S3
          Properties:
            Bucket: !Ref ModelBucket
            Events: s3:ObjectCreated:*

  GetRoundAggregateModelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/round/get/aggregate_model/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-GetRoundAggregateModel"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref RoundsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
        - !Ref S3GetObjectPolicy
      Events:
        GetRoundAggregateModelApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/round/aggregate_model/{group_id}/{round_id}
            Method: get

  CreateGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/group/post/create/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-CreateGroup"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
      Events:
        CreateGroupApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/group/create
            Method: post

  DeleteGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/group/delete/group/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-DeleteGroup"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RoundsTable
        - S3CrudPolicy:
            BucketName: !Ref ModelBucket
      Events:
        DeleteGroupApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/group/delete
            Method: post

  IsDeviceActiveFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/device/get/is_active/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-IsDeviceActive"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref RoundsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
      Events:
        IsDeviceActiveApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/device/is_active/{group_id}/{round_id}/{device_id}
            Method: get

  GetGroupActiveRoundsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/group/get/active_rounds/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-GetGroupActiveRoundsFunction"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
      Events:
        GetGroupActiveRoundsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/group/active_rounds/{group_id}
            Method: get

  SubmitModelUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/device/post/submit_model_update/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-SubmitModelUpdate"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RoundsTable
        - AWSLambdaBasicExecutionRole
        - !Ref S3PutObjectPolicy
      Events:
        SubmitModelUpdateApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/device/submit_model_update
            Method: post

  GetRoundStartModelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/round/get/start_model/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-GetRoundStartModel"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref RoundsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
        - !Ref S3GetObjectPolicy
      Events:
        GetRoundStartModelApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref FmlaasProdApi
            Path: /v1/round/start_model/{group_id}/{round_id}
            Method: get

  AggregateModelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 60
      MemorySize: 1536
      CodeUri: api/aggregate_models/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-AggregateModels"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RoundsTable
        - !Ref S3GetObjectPolicy
        - !Ref S3PutObjectPolicy

Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  ApiId:
    Description: "API ID"
    Value: !Ref FmlaasProdApi

  ApiUrl:
    Description: URL for endpoint
    Value: !Sub "https://${FmlaasProdApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref FedLearnCognitoUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref FedLearnCognitoUserPoolClient
