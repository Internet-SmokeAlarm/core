AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: FMLaaS Core

Globals:
  Function:
    Timeout: 60
    Runtime: python3.7
    MemorySize: 256
    Environment:
      Variables:
        MODELS_BUCKET: fmlaas-models
        DEVICE_TABLE_NAME: fml_devices
        LEARNING_ROUND_TABLE_NAME: fml_rounds
        GROUPS_TABLE_NAME: fml_groups

Resources:
  # ------------ DynamoDB ------------
  GroupsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "ID"
          AttributeType: "N"
      KeySchema:
        -
          AttributeName: "ID"
          KeyType: "HASH"
      TableName: "fml_groups"

  LearningRoundTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "ID"
          AttributeType: "N"
      KeySchema:
        -
          AttributeName: "ID"
          KeyType: "HASH"
      TableName: "fml_rounds"

  DevicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "ID"
          AttributeType: "N"
        -
          AttributeName: "APIKey"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "ID"
          KeyType: "HASH"
        -
          AttributeName: "APIKey"
          KeyType: "RANGE"
      TableName: "fml_devices"


  # ------------ S3 ------------
  ModelBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: fmlaas-models


  # ------------ IAM ------------
  S3PutObjectPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: S3PutObjectPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub "${ModelBucket.Arn}/*"

  S3GetObjectPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: S3GetObjectPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub "${ModelBucket.Arn}/*"


  # ------------ Lambda ------------
  RegisterDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: register_device/
      Handler: app.lambda_handler
      FunctionName: RegisterDevice
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref DevicesTable
      Events:
        RegisterDeviceApiEvent:
          Type: Api
          Properties:
            Path: /api/v1/device/register
            Method: post

  StartRoundFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: start_round/
      Handler: app.lambda_handler
      FunctionName: StartRound
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref LearningRoundTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
      Events:
        StartRoundApiEvent:
          Type: Api
          Properties:
            Path: /api/v1/round/start
            Method: post

  CreateGroupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create_group/
      Handler: app.lambda_handler
      FunctionName: CreateGroup
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref GroupsTable
      Events:
        CreateGroupApiEvent:
          Type: Api
          Properties:
            Path: /api/v1/create_group
            Method: post

  SubmitModelUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: submit_model_update/
      Handler: app.lambda_handler
      FunctionName: SubmitModelUpdate
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LearningRoundTable
        - AWSLambdaBasicExecutionRole
        - !Ref S3PutObjectPolicy
      Events:
        SubmitModelUpdateApiEvent:
          Type: Api
          Properties:
            Path: /api/v1/submit_model_update
            Method: post

  AggregateModelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: aggregate_models/
      Handler: app.lambda_handler
      FunctionName: AggregateModels
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref LearningRoundTable
        - !Ref S3GetObjectPolicy
        - !Ref S3PutObjectPolicy
      Events:
        AggregateModelsApiEvent:
          Type: Api
          Properties:
            Path: /api/v1/round/aggregate
            Method: post
