AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Verge AI Core

Parameters:
  Stage:
    Type: String

Globals:
  Function:
    Runtime: python3.7
    Environment:
      Variables:
        MODELS_BUCKET: !Join ["", [!Ref Stage, "-fl-models"]]
        PROJECTS_TABLE_NAME: !Join ["", [!Ref Stage, "-fl-projects"]]
        JOBS_TABLE_NAME: !Join ["", [!Ref Stage, "-fl-jobs"]]
        AUTH_KEY_TABLE_NAME: !Join ["", [!Ref Stage, "-fl-auth-key"]]
        AGGREGATION_LAMBDA_FUNCTION_NAME: !Join ["", [!Ref Stage, "-AggregateModels"]]
        COGNITO_USER_POOL_CLIENT_ID: !Ref AuthCognitoUserPoolClient
        COGNITO_USER_POOL_ID: !Ref AuthCognitoUserPool

Resources:
  # ------------ Api ------------
  ApiGw:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Auth:
        DefaultAuthorizer: LambdaRequestAuthorizer
        Authorizers:
          LambdaRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt LambdaAuthFunction.Arn
            Identity:
              Headers:
                - Authorization


  # ------------ DynamoDB ------------
  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "ID"
          KeyType: "HASH"
      TableName: !Join ["", [!Ref Stage, "-fl-projects"]]

  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "ID"
          KeyType: "HASH"
      TableName: !Join ["", [!Ref Stage, "-fl-jobs"]]

  AuthKeyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: "ID"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "ID"
          KeyType: "HASH"
      TableName: !Join ["", [!Ref Stage, "-fl-auth-key"]]


  # ------------ Cognito ------------
  AuthCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join ["", [!Ref Stage, "-fl-user-pool"]]
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 30
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  AuthCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AuthCognitoUserPool
      ClientName: !Join ["", [!Ref Stage, "-fl-user-pool-client"]]
      GenerateSecret: false


  # ------------ S3 ------------
  ModelBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["", [!Ref Stage, "-fl-models"]]


  # ------------ IAM ------------
  S3PutObjectPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["", [!Ref Stage, "-S3PutObjectPolicy"]]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub "${ModelBucket.Arn}/*"

  S3GetObjectPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["", [!Ref Stage, "-S3GetObjectPolicy"]]
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub "${ModelBucket.Arn}/*"


  # ------------ Layers ------------
  FMLaaSCoreDependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: core-sam-dependencies
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.7
      RetentionPolicy: Delete


  # ------------ Lambda ------------
  LambdaAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      MemorySize: 1536
      CodeUri: api/lambda_authorizer/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-LambdaAuthorizer"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthKeyTable

  CreateApiKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      MemorySize: 1536
      CodeUri: api/api_key/post/create/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-CreateApiKey"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthKeyTable
      Events:
        CreateApiKeyEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/auth/create_key
            Method: post

  RegisterDeviceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 10
      MemorySize: 1536
      CodeUri: api/project/post/register_device/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-RegisterDevice"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AuthKeyTable
      Events:
        RegisterDeviceApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/device/create
            Method: post

  CancelJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/job/post/cancel/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-CancelJob"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
      Events:
        CancelJobApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/job/cancel
            Method: post

  SubmitExperimentStartModelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/experiment/post/submit_start_model/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-SubmitExperimentStartModel"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - !Ref S3PutObjectPolicy
      Events:
        SubmitExperimentStartModelApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/experiment/submit_start_model
            Method: post

  CreateJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/job/post/create/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-CreateJob"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
      Events:
        CreateJobApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/job/create
            Method: post

  GetJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/job/get/job/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-GetJob"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        GetJobApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/job/get/{project_id}/{job_id}
            Method: get

  GetProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/project/get/project/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-GetProject"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        GetProjectApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/project/get/{project_id}
            Method: get

  ModelUploadedFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/model_uploaded/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-ModelUploaded"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
      Events:
        ModelUploadedEvent:
          Type: S3
          Properties:
            Bucket: !Ref ModelBucket
            Events: s3:ObjectCreated:*

  GetJobAggregateModelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/job/get/aggregate_model/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-GetJobAggregateModel"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - !Ref S3GetObjectPolicy
      Events:
        GetJobAggregateModelApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/job/aggregate_model/{project_id}/{job_id}
            Method: get

  CreateProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/project/post/create/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-CreateProject"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        CreateProjectApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/project/create
            Method: post

  DeleteProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/project/delete/project/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-DeleteProject"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - S3CrudPolicy:
            BucketName: !Ref ModelBucket
      Events:
        DeleteProjectApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/project/delete
            Method: post

  IsDeviceActiveFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/device/get/is_active/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-IsDeviceActive"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        IsDeviceActiveApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/device/is_active/{project_id}/{job_id}/{device_id}
            Method: get

  GetProjectActiveJobsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/project/get/active_jobs/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-GetProjectActiveJobsFunction"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        GetProjectActiveJobsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/project/active_jobs/{project_id}
            Method: get

  SubmitModelUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/device/post/submit_model_update/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-SubmitModelUpdate"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - AWSLambdaBasicExecutionRole
        - !Ref S3PutObjectPolicy
      Events:
        SubmitModelUpdateApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/device/submit_model_update
            Method: post

  GetJobStartModelFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 3
      MemorySize: 128
      CodeUri: api/job/get/start_model/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-GetJobStartModel"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - !Ref S3GetObjectPolicy
      Events:
        GetJobStartModelApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGw
            Path: /v1/job/start_model/{project_id}/{job_id}
            Method: get

  AggregateModelsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 60
      MemorySize: 1536
      CodeUri: api/aggregate_models/
      Handler: app.lambda_handler
      FunctionName: !Join ["", [!Ref Stage, "-AggregateModels"]]
      Layers:
        - !Ref FMLaaSCoreDependencyLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - !Ref S3GetObjectPolicy
        - !Ref S3PutObjectPolicy

Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  ApiId:
    Description: "API ID"
    Value: !Ref ApiGw

  ApiUrl:
    Description: URL for endpoint
    Value: !Sub "https://${ApiGw}.execute-api.${AWS::Region}.amazonaws.com/"

  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref AuthCognitoUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref AuthCognitoUserPoolClient
